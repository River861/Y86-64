#############################################

River's Y86-64（无GUI版）使用说明：

#############################################

0 请在window系统上运行

1 打开River's Y86-64/Debug/River's Y86-64.exe开始执行程序（运行前可先将test result文件夹清空）

2 输入"test_begin."开始运行测例 （运行时间30s左右）

3 打开test result文件夹检查运行结果

―――――――――――――――――――――――――――――――

几点解释说明：

―――――――――――――――――――――――――――――――

0 River's Y86-64.exe运用了C++的thread库实现了多线程

1 所有数据冒险我都是采用插入气泡，等待前面的指令write-back后再继续执行的方法，没有用范例pipe所用的转发的办法，故执行周期会多一些（特别是停止时，predPC不会增加，这与范例pipe不同，但只是实现方法上的差异，不影响结果的正确性）

2 halt指令在执行阶段才将状态值置为HLT，这与所给范例pipe不同

3 Bubble部分直接提示为doing nothing，而不显示为执行nop语句（实际操作一致），与所给范例pipe不同

4 jump的跳转操作：当遇到跳转错误时，会使紧跟着的几条错误执行的指令直接停止

5 当PC越界时（读完文件），将会停止PC的增加，而不像范例pipe中继续向前指

6 新增了iaddq指令，使得asumi.yo能得到正确结果，与范例pipe不同

7 在遇见无效地址时，该指令不会执行，程序直接停止，这与范例pipe一致，但和ISA check不符
   prog10.yo中我认为无效的地址不应该被写入%rsp中

―――――――――――――――――――――――――――――――

文件说明：

―――――――――――――――――――――――――――――――

River's Y86-64：C++项目（包括源文件、头文件等）

test：测例

test result：运行结果（运行时会覆盖原来的内容）
